{"0": {
    "doc": "License",
    "title": "License",
    "content": "MICROCHIP SOFTWARE IS PROVIDED SOLELY TO ASSIST YOU IN DEVELOPING PRODUCTS AND SYSTEMS THAT USE MICROCHIP PRODUCTS. DOWNLOAD AND/OR USE OF THE SOFTWARE REQUIRES THAT YOU ACCEPT THIS SOFTWARE LICENSE AGREEMENT. IF YOU DO NOT WISH TO ACCEPT THESE TERMS, DO NOT DOWNLOAD OR USE ANY OF THE SOFTWARE. DOWNLOADING OR USING THE SOFTWARE CONTITUTES YOUR ACCEPTANCE OF THIS SOFTWARE LICENSE AGREEMENT. SOFTWARE LICENSE AGREEMENT . This Software License Agreement (“Agreement”) is an agreement between you (if licensing as an individual) or the entity you represent (if licensing as a business) (“you” or “Licensee”) and Microchip Technology Incorporated, a Delaware corporation, with a place of business at 2355 W. Chandler Blvd., Chandler, AZ 85224-6199, and its affiliates including Microchip Technology Ireland Limited, a company organized under the laws of Ireland, with a principal address at Ground Floor, Block W., East Point Business Park, Dublin, Ireland 3 (collectively, “Microchip”) for the Microchip MPLAB Harmony Integrated Software Framework and documentation included in the download or otherwise provided by Microchip to Licensee (collectively, the “Software”). 1. Use. Subject to the terms of this Agreement, Microchip hereby grants Licensee a limited, revocable, non-exclusive, non-transferable, worldwide license to (a) use the Software, and (b) modify the Software provided in source code form, if any (and use and copy modifications of such Software made by Licensee), provided that in each case (with respect to clauses (a) and (b)) Licensee solely uses the Software with Microchip Products, Licensee Products, or other products agreed to by Microchip in writing. Licensee has no right to (i) substitute third party products for Microchip Products, or (ii) except as expressly provided in Section 2 below, sublicense its rights under this Agreement or otherwise disclose or distribute the Software to any third party. Licensee may make a reasonable number of copies of the Software solely as necessary to exercise its license rights in this Section 1. Licensee will not remove or alter any copyright, trademark, or other proprietary notices contained on or in the Software or any copies. “Microchip Products” means those Microchip devices purchased from Microchip or one of its authorized distributors that are identified in the Software, or if not identified in the Software, then such Microchip devices that are consistent with the purpose of the Software, including but not limited to Microchip 32-bit microcontroller and microprocessor devices and the like. “Licensee Products” means products manufactured by or for Licensee that use or incorporate Microchip Products. 2. Subcontractors. If Licensee wishes for its subcontractor to obtain and use the Software in order to provide design, manufacturing, or other services to Licensee: (a) such subcontractor may (i) download and agree to the terms of this Agreement or (ii) contact Microchip directly for a copy of this Agreement and agree to its terms; or (b) Licensee may sublicense the rights described in Section 1 directly to its subcontractor, provided that (i) such subcontractor agrees in writing to the terms of this Agreement - a copy of which will be provided to Microchip upon request, and (ii) Licensee is liable for such subcontractor's acts and omissions. 3. Third Party Software. (a) Third Party Materials. Licensee agrees to comply with third party license terms applicable to Third Party Materials, if any. Microchip will not be held responsible for Licensee's failure to comply with such terms. Microchip has no obligation to provide support or maintenance for Third Party Materials. \"Third Party Materials\" means the third party software, systems, tools, or specifications (including those of a standards setting organization) referenced in, bundled with, or included in the Software. (b) Open Source Components. Notwithstanding the license grant in Section 1 above, Licensee acknowledges that the Software may include Open Source Components. To the extent required by the licenses covering Open Source Components, the terms of such license apply in lieu of the terms of this Agreement. To the extent the terms of the licenses applicable to Open Source Components prohibit any of the restrictions in this Agreement with respect to such Open Source Components, those restrictions will not apply to the Open Source Component. \"Open Source Components\" means components of the Software that are subject to the terms of an Open Source License. \"Open Source License\" means any software license approved as an open source license by the Open Source Initiative or any substantially similar license, including without limitation any license that, as a condition of distribution of the software licensed under such license, requires that the distributor make the software available in source code format. 4. Licensee Obligations. (a) Restrictions. Except as expressly permitted by this Agreement, Licensee agrees that it will not (i) modify or alter the Software or a Microchip Product; (ii) adapt, translate, decompile, reverse engineer, disassemble the Software provided in object code form, any Microchip Product, or any samples or prototypes provided by Microchip, or create derivative works thereof; or (iii) use the Software with any software or other materials that are subject to licenses or restrictions (e.g., Open Source Licenses) that, when combined with the Software, would require Microchip to disclose, license, distribute, or otherwise make all or any part of such Software available to anyone. (b) Indemnity. Licensee will indemnify (and, at Microchip's election, defend) Microchip from and against any and all claims, costs, damages, expenses (including reasonable attorneys' fees), liabilities, and losses, arising out of or related to: (i) Licensee's modification, disclosure, or distribution of the Software or Third Party Materials; (ii) the use, sale, or distribution of Licensee Products; and (iii) an allegation that Licensee Products or Licensee's modification of the Software infringe third party intellectual property rights. (c) Licensee Products. Licensee understands and agrees that Licensee remains responsible for using its independent analysis, evaluation, and judgment in designing Licensee Products and systems and has full and exclusive responsibility to assure the safety of its products and compliance of its products (and of all Microchip Products used in or for such Licensee Products) with applicable laws and requirements. 5. Confidentiality. (a) Licensee agrees that the Software, underlying inventions, algorithms, know-how, and ideas relating to the Software, and any other non-public business or technical information disclosed by Microchip to Licensee are confidential and proprietary information, including information derived therefrom, belonging to Microchip and its licensors (collectively, \"Confidential Information\"). Licensee will use Confidential Information only to exercise its rights and perform its obligations under this Agreement and will take all reasonable measures to protect the secrecy of and avoid unauthorized access, disclosure, and use of Confidential Information. Such measures include, but are not limited to, the highest degree of care that it uses to protect its own information of a similar nature, but not less than reasonable care. Licensee will only disclose Confidential Information to its employees, subcontractors, consultants, auditors and representatives (collectively \"Representatives\") who have a need to know such information and who have use and confidentiality obligations to Licensee at least as restrictive as those set forth in this Agreement. Licensee is responsible for disclosure or misuse of Confidential Information by its Representatives. Use of Confidential Information for personal gain, for the benefit of a third party or to compete with Microchip, whether directly or indirectly, is a breach of this Agreement. Licensee will notify Microchip in writing of any actual or suspected misuse, misappropriation, or unauthorized disclosure of Confidential Information that comes to Licensee's attention. Confidential Information will not include information that: (i) is or becomes publicly available without breach of this Agreement; (ii) is known or becomes known to Licensee from a source other than Microchip without restriction and without breach of this Agreement or violation of Microchip's rights, as demonstrated by credible evidence in existence at the time of disclosure; (iii) is independently developed by Licensee without use of or reference to the Confidential Information, as demonstrated by credible evidence in existence at the time of independent development; or (iv) is disclosed generally to third parties by Microchip without restrictions similar to those contained in this Agreement. Licensee may disclose Confidential Information to the extent required under law, rule, or regulation (including those of any national securities exchange), by subpoena, civil investigative demand, or similar process, or by a court or administrative agency (each a \"Requirement\"'), provided, that to the extent permitted by applicable law, Licensee will provide prompt notice of such Requirement to Microchip to enable Microchip to seek a protective order or otherwise prevent or restrict such disclosure. (b) Return of Materials. Upon Microchip's request and direction, Licensee will promptly return or destroy the Confidential Information, including any physical information or materials provided to Licensee (together with any copies, excerpts, syntheses, CD ROMS, diskettes, etc.), and, in the case of information derived therefrom, provide written certification that all the Confidential Information has been expunged from any such materials or that all such materials have been destroyed. Further, if Licensee or its affiliates become competitors of Microchip, and Microchip notifies Licensee in writing of its status as a competitor in a given market, then Licensee will promptly engage in the return and certification process described above in this Section 5(b). 6. Ownership and Retention of Rights. All rights, title, and interest (including all intellectual property rights) in and to the Software, including any derivative works of the Software and any incremental modifications to the Software whether made by or for Licensee or Microchip (collectively, \"Microchip Property\"), are and will remain the sole and exclusive property of Microchip, whether such Microchip Property is separate or combined with any other products. Licensee, on behalf of itself and its affiliates, agrees to, and does hereby, assign to Microchip or its designee all right, title and interest (including all intellectual property rights) in and to derivative works of and any incremental modifications to the Software. Licensee will take (and will cause its affiliates, their subcontractors, and all related individuals to take) all action as may be reasonably necessary, proper or advisable to perfect and secure the ownership, licenses, intellectual property and other rights of or to Microchip as set forth in this Agreement. All rights not expressly granted under this Agreement are reserved to Microchip and its licensors and suppliers, and there are no implied rights. Licensee retains all right, title, and interest in and to any technology independently developed by Licensee not derived, directly or indirectly, from the Microchip Property or any other item of tangible property provided to Licensee by Microchip hereunder. 7. Termination. This Agreement will start once accepted by Licensee and continue unless and until terminated as provided in this Agreement. This Agreement automatically terminates immediately if Licensee violates the restrictions set forth in Sections 1, 2 or 4(a). Microchip may terminate this Agreement immediately upon notice if (a) Licensee or its affiliates become competitors of Microchip, or (b) Licensee breaches any other term of this Agreement and does not cure such breach within 30 days after receipt of written notice of such breach from Microchip. Upon termination of this Agreement, (i) the license grants in Sections 1 and 2(b) terminate, and (ii) Licensee will return to Microchip or destroy (and certify the destruction of) all Microchip Property and Confidential Information in its possession or under its control, and all copies thereof. The following sections survive termination of this Agreement: 3, 4, 5, 6, 7, 8, 9, 10, 11 and 12. 8. Dangerous Applications. The Software is not fault-tolerant and is not designed, manufactured, or intended for use in hazardous environments requiring failsafe performance (\"Dangerous Applications\"). Dangerous Applications include the operation of nuclear facilities, aircraft navigation, aircraft communication systems, air traffic control, direct life support machines, weapons systems, or any environment or system in which the failure of the Software could lead directly or indirectly to death, personal injury, or severe physical or environmental damage. Microchip specifically disclaims (a) any express or implied warranty of fitness for use of the Software in Dangerous Applications; and (b) any and all liability for loss, damages and claims resulting from the use of the Software in Dangerous Applications. 9. EU Consumers - Applicable Terms. WHERE LICENSEE IS A CONSUMER LOCATED IN EUROPE, THE FOLLOWING PROVISIONS APPLY INSTEAD OF SECTIONS 9 AND 10 BELOW: Microchip and its licensors will not be liable (a) for any loss suffered by Licensee in connection with the Software where such loss was not reasonably foreseeable when the Software was first downloaded by Licensee, even if such loss was the result of negligence or the failure of Microchip and its licensors to comply with this Agreement; or (b) irrespective of the basis of claim, for any loss of revenue, profit or other business or economic loss suffered. Some Software is made available to Licensee free of charge, and Licensee may at any time download further copies without charge to replace the Software initially downloaded and others may require a fee to be downloaded, or to download any further copies. In all circumstances, to the extent liability may lawfully be limited or excluded, the cumulative liability of Microchip and its licensors will not exceed USD$1,000 (or equivalent sum in the currency of the country in which Licensee resides). However, none of the foregoing limits or excludes any liability for death or personal injury arising from negligence, or for fraud, fraudulent misrepresentation or any other cause that by law cannot be excluded and limited. 10. Warranty Disclaimers. EXCEPT FOR CONSUMERS TO WHOM SECTION 8 APPLIES, THE SOFTWARE IS LICENSED ON AN \"AS-IS\" BASIS. MICROCHIP MAKES NO WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER EXPRESS, IMPLIED, STAUTORY OR OTHERWISE, AND EXPRESSLY DISCLAIMS ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE OR NON-INFRINGEMENT AND ANY WARRANTIES THAT MAY ARISE FROM USAGE OF TRADE OR COURSE OF DEALING. MICROCHIP AND ITS LICENSORS HAVE NO OBLIGATION TO CORRECT ANY DEFECTS IN THE SOFTWARE. TECHNICAL ASSISTANCE, IF PROVIDED, WILL NOT EXPAND THESE WARRANTIES. IF CUSTOMER IS A CONSUMER, THE ABOVE WILL NOT ACT TO EXCLUDE YOUR STATUTORY RIGHTS. 11. Limited Liability. EXCEPT FOR CONSUMERS TO WHOM SECTION 8 APPLIES, IN NO EVENT WILL MICROCHIP BE LIABLE, WHETHER IN CONTRACT, WARRANTY, REPRESENTATION, TORT, STRICT LIABILITY, INDEMNITY, CONTRIBUTION OR OTHERWISE, FOR ANY INDIRECT, SPECIAL, PUNITIVE, EXEMPLARY, INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND WHATSOEVER, HOWEVER CAUSED, OR ANY LOSS OF PRODUCTION, COST OF PROCUREMENT OF SUBSTITUTE PRODUCTS OR SERVICES, ANY LOSS OF PROFITS, LOSS OF BUSINESS, LOSS OF USE OR LOSS OF DATA, OR INTERRUPTION OF BUSINESS ARISING OUT OF THIS AGREEMENT, HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, EVEN IF MICROCHIP HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS, AND NOTWITHSTANDING ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY. MICROCHIP'S TOTAL AGGREGATE LIABILITY UNDER THIS AGREEMENT WILL NOT EXCEED USD$1,000. 12. General. (a) This Agreement will be governed by and construed in accordance with the laws of the State of Arizona and the United States, without regard to conflicts of law provisions. The parties hereby irrevocably consent to the exclusive personal jurisdiction and venue of the state and federal courts in Maricopa County, Arizona for any dispute relating to this Agreement. WHERE LICENSEE IS A CONSUMER LOCATED IN EUROPE, this Agreement is subject to the laws of the country in which the Software is downloaded, and, to the extent so mandated by such laws, subject to the jurisdiction of the courts of that country. The parties expressly disclaim the applicability of the United Nations Convention on Contracts for the International Sale of Goods in connection with this Agreement. (b) Unless the parties have a mutually executed agreement relating to the licensing of this Software by Microchip to Licensee (\"Signed Agreement\"), this Agreement constitutes the entire agreement between the parties with respect to the Software, and supersedes and replaces prior or contemporaneous written or verbal agreements or communications between the parties regarding the Software, including any purchase orders. If the parties have a Signed Agreement, this Agreement does not supersede or replace that Signed Agreement. This Agreement will not be modified except by a written agreement signed by an authorized representative of Microchip. If any provision of this Agreement is held by a court of competent jurisdiction to be illegal, invalid, or unenforceable, that provision will be limited or eliminated to the minimum extent necessary so that this Agreement will otherwise remain in full force and effect and enforceable. No waiver of any breach of any provision of this Agreement constitutes a waiver of any prior, concurrent, or subsequent breach of the same or any other provisions of this Agreement, and no waiver will be effective unless made in writing and signed by an authorized representative of the waiving party. (c) Licensee agrees to comply with all import and export laws and restrictions and regulations of the Department of Commerce or other United States or foreign agency or authority. (d) This Agreement will bind and inure to the benefit of each party's permitted successors and assigns. Licensee may not assign this Agreement in whole or in part, whether by law or otherwise, without Microchip's prior written consent. Any merger, consolidation, amalgamation, reorganization, transfer of all or substantially all assets or other change in control or majority ownership (\"Change of Control\") is considered an assignment for the purpose of this Section. Any attempt to assign this Agreement without such consent will be null and void. However, Microchip may assign this Agreement to an affiliate, or to another entity in the event of a Change of Control. (e) Licensee acknowledges its breach of any confidentiality or proprietary rights provision of this Agreement would cause Microchip irreparable damage, for which the award of damages would not be an adequate remedy. Licensee, therefore, agrees if Microchip alleges that Licensee has breached or violated any such provisions then Microchip may seek equitable relief, in addition to all other remedies at law or in equity. (f) Authorized representatives of Microchip shall have the right to reasonably inspect Licensee's premises and to audit Licensee's records and inventory of Licensee Products, whether located on Licensee's premises or elsewhere at any time, announced or unannounced, and in its sole and absolute discretion, in order to ensure Licensee's adherence to the terms of this Agreement. (g) Consistent with 48 C.F.R. §12.212 or 48 C.F.R. §227.7202-1 through 227.7202-4, as applicable, the Software is being licensed to U.S. Government end users (i) only as Commercial Items, and (ii) with only those rights as are granted to all other end users pursuant to the terms and conditions of the applicable Microchip licenses. To the extent the Software (or a portion thereof) qualifies as 'technical data' as such term is defined in 48 C.F.R. §252.227-7015(a)(5), then its use, duplication, or disclosure by the U.S. Government is subject to the restrictions set forth in subparagraphs (a) through (e) of the Rights in Technical Data clause at 48 C.F.R. §252.227-7015. Contractor/manufacturer is Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85224-6199. Questions about this Agreement should be sent to: Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85224-6199 USA. ATTN: Marketing. v.3.3.2021 . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/mplab_harmony_license.html",
    "relUrl": "/mplab_harmony_license.html"
  },"1": {
    "doc": "I2C driver synchronous - I2C EEPROM",
    "title": "I2C driver synchronous - I2C EEPROM",
    "content": "This example application shows how to use the I2C driver in synchronous mode to perform operations on the EEPROM. ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/i2c/sync/i2c_eeprom/readme.html#i2c-driver-synchronous---i2c-eeprom",
    "relUrl": "/apps/driver/i2c/sync/i2c_eeprom/readme.html#i2c-driver-synchronous---i2c-eeprom"
  },"2": {
    "doc": "I2C driver synchronous - I2C EEPROM",
    "title": "Description",
    "content": "This example uses the I2C driver in synchronous mode to communicate with the EEPROM to perform write and read operations in RTOS environment. This application uses I2C driver to read and write data from an AT24CM02 EEPROM device. ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/i2c/sync/i2c_eeprom/readme.html#description",
    "relUrl": "/apps/driver/i2c/sync/i2c_eeprom/readme.html#description"
  },"3": {
    "doc": "I2C driver synchronous - I2C EEPROM",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/driver/i2c/sync/i2c_eeprom/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_rh71_ek_freertos.X | MPLABX project for SAM RH71 Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/i2c/sync/i2c_eeprom/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/driver/i2c/sync/i2c_eeprom/readme.html#downloading-and-building-the-application"
  },"4": {
    "doc": "I2C driver synchronous - I2C EEPROM",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_rh71_ek_freertos.X | SAM RH71 Evaluation Kit | . |   |   | . Setting up SAM RH71 Evaluation Kit . | To run the demo, the following additional hardware are required: . | One EEPROM 3 Click board | One mikroBUS Xplained Pro boards | . | Connect mikroBUS Xplained Pro board to J24 header | Plug the EEPROM 3 click Board into the MikroBus socket of the mikroBUS Xplained Pro board | Connect the J15 USB port on the board to the computer using a mini USB cable | Connect debugger to the 20-pin JTAG header J33 | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/i2c/sync/i2c_eeprom/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/driver/i2c/sync/i2c_eeprom/readme.html#setting-up-the-hardware"
  },"5": {
    "doc": "I2C driver synchronous - I2C EEPROM",
    "title": "Running the Application",
    "content": ". | Build and program the application using its IDE | LED indicates success or failure: . | The LED is turned ON when the value read from the EEPROM matched with the written value | . | . Refer to the following table for LED name: . | Board | LED Name | . | SAM RH71 Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/i2c/sync/i2c_eeprom/readme.html#running-the-application",
    "relUrl": "/apps/driver/i2c/sync/i2c_eeprom/readme.html#running-the-application"
  },"6": {
    "doc": "I2C driver synchronous - I2C EEPROM",
    "title": "I2C driver synchronous - I2C EEPROM",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/i2c/sync/i2c_eeprom/readme.html",
    "relUrl": "/apps/driver/i2c/sync/i2c_eeprom/readme.html"
  },"7": {
    "doc": "Parallel PROM SST38 driver - SST38VF6401 memory Read Write",
    "title": "Parallel PROM SST38 driver - SST38VF6401 memory Read Write",
    "content": "This example application shows how to use the Parallel PROM SST38 driver to perform read and write operations on a SST38VF6401 memory. ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/parallel_prom/sst38_read_write/firmware/readme.html#parallel-prom-sst38-driver---sst38vf6401-memory-read-write",
    "relUrl": "/apps/driver/parallel_prom/sst38_read_write/firmware/readme.html#parallel-prom-sst38-driver---sst38vf6401-memory-read-write"
  },"8": {
    "doc": "Parallel PROM SST38 driver - SST38VF6401 memory Read Write",
    "title": "Description",
    "content": "This example uses the Parallel PROM SST38 driver to communicate with the external SST38VF6401 parallel memory to perform write and read operations in Bare-Metal environment. ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/parallel_prom/sst38_read_write/firmware/readme.html#description",
    "relUrl": "/apps/driver/parallel_prom/sst38_read_write/firmware/readme.html#description"
  },"9": {
    "doc": "Parallel PROM SST38 driver - SST38VF6401 memory Read Write",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/driver/parallel_prom/sst38_read_write/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_rh71_ek.X | MPLABX project for SAM RH71 TFBGA Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/parallel_prom/sst38_read_write/firmware/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/driver/parallel_prom/sst38_read_write/firmware/readme.html#downloading-and-building-the-application"
  },"10": {
    "doc": "Parallel PROM SST38 driver - SST38VF6401 memory Read Write",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_rh71_ek.X | SAM RH71 TFBGA Evaluation Kit | . |   |   | . Setting up SAM RH71 TFBGA Evaluation Kit . | Connect mini USB to DEBUG_USB connector to use the embedded PkoB4 debugger. | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/parallel_prom/sst38_read_write/firmware/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/driver/parallel_prom/sst38_read_write/firmware/readme.html#setting-up-the-hardware"
  },"11": {
    "doc": "Parallel PROM SST38 driver - SST38VF6401 memory Read Write",
    "title": "Running the Application",
    "content": ". | Build and program the application using the IDE | The LED0 is turned ON when the value read from EEPROM matches with the written data. | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/parallel_prom/sst38_read_write/firmware/readme.html#running-the-application",
    "relUrl": "/apps/driver/parallel_prom/sst38_read_write/firmware/readme.html#running-the-application"
  },"12": {
    "doc": "Parallel PROM SST38 driver - SST38VF6401 memory Read Write",
    "title": "Parallel PROM SST38 driver - SST38VF6401 memory Read Write",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/parallel_prom/sst38_read_write/firmware/readme.html",
    "relUrl": "/apps/driver/parallel_prom/sst38_read_write/firmware/readme.html"
  },"13": {
    "doc": "Parallel PROM SST39 driver - SST39VF040 memory Read Write",
    "title": "Parallel PROM SST39 driver - SST39VF040 memory Read Write",
    "content": "This example application shows how to use the Parallel PROM SST39 driver to perform read and write operations on a SST39VF040 memory. ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/parallel_prom/sst39_read_write/firmware/readme.html#parallel-prom-sst39-driver---sst39vf040-memory-read-write",
    "relUrl": "/apps/driver/parallel_prom/sst39_read_write/firmware/readme.html#parallel-prom-sst39-driver---sst39vf040-memory-read-write"
  },"14": {
    "doc": "Parallel PROM SST39 driver - SST39VF040 memory Read Write",
    "title": "Description",
    "content": "This example uses the Parallel PROM SST39 driver to communicate with the external SST39VF040 parallel memory to perform write and read operations in Bare-Metal environment. ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/parallel_prom/sst39_read_write/firmware/readme.html#description",
    "relUrl": "/apps/driver/parallel_prom/sst39_read_write/firmware/readme.html#description"
  },"15": {
    "doc": "Parallel PROM SST39 driver - SST39VF040 memory Read Write",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/driver/parallel_prom/sst39_read_write/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_rh71_ek.X | MPLABX project for SAM RH71 Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/parallel_prom/sst39_read_write/firmware/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/driver/parallel_prom/sst39_read_write/firmware/readme.html#downloading-and-building-the-application"
  },"16": {
    "doc": "Parallel PROM SST39 driver - SST39VF040 memory Read Write",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_rh71_ek.X | SAM RH71 Evaluation Kit | . |   |   | . Setting up SAM RH71 Evaluation Kit . | Connect debugger to the 20-pin JTAG header J33 | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/parallel_prom/sst39_read_write/firmware/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/driver/parallel_prom/sst39_read_write/firmware/readme.html#setting-up-the-hardware"
  },"17": {
    "doc": "Parallel PROM SST39 driver - SST39VF040 memory Read Write",
    "title": "Running the Application",
    "content": ". | Build and program the application using the IDE | The LED0 is turned ON when the value read from EEPROM matches with the written data. | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/parallel_prom/sst39_read_write/firmware/readme.html#running-the-application",
    "relUrl": "/apps/driver/parallel_prom/sst39_read_write/firmware/readme.html#running-the-application"
  },"18": {
    "doc": "Parallel PROM SST39 driver - SST39VF040 memory Read Write",
    "title": "Parallel PROM SST39 driver - SST39VF040 memory Read Write",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/parallel_prom/sst39_read_write/firmware/readme.html",
    "relUrl": "/apps/driver/parallel_prom/sst39_read_write/firmware/readme.html"
  },"19": {
    "doc": "SPI Driver asynchronous - Self loopback multi client",
    "title": "SPI Driver asynchronous - Self loopback multi client",
    "content": "This example demonstrates how to use the SPI driver in asynchronous mode to achieve self-loop back between multiple clients . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/spi/async/spi_self_loopback_multi_client/readme.html#spi-driver-asynchronous---self-loopback-multi-client",
    "relUrl": "/apps/driver/spi/async/spi_self_loopback_multi_client/readme.html#spi-driver-asynchronous---self-loopback-multi-client"
  },"20": {
    "doc": "SPI Driver asynchronous - Self loopback multi client",
    "title": "Description",
    "content": ". | This example writes and reads back the same data (self loop back) for two different clients connected over the same SPI bus by using the multi client feature of the driver . | It uses the request (write and read request) queuing feature of the asynchronous driver and does not waste CPU bandwidth in waiting for previous request completion . | The example also demonstrates how to setup two different client transfers at different baud rates . | This example performs self loop back only once after a power on reset | Success is indicated when a successful self loop back is reported by both the clients | After the loop back test is complete, the application remains in the idle state | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/spi/async/spi_self_loopback_multi_client/readme.html#description",
    "relUrl": "/apps/driver/spi/async/spi_self_loopback_multi_client/readme.html#description"
  },"21": {
    "doc": "SPI Driver asynchronous - Self loopback multi client",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/driver/spi/async/spi_self_loopback_multi_client/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_rh71_ek.X | MPLABX project for SAM RH71 Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/spi/async/spi_self_loopback_multi_client/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/driver/spi/async/spi_self_loopback_multi_client/readme.html#downloading-and-building-the-application"
  },"22": {
    "doc": "SPI Driver asynchronous - Self loopback multi client",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_rh71_ek.X | SAM RH71 Evaluation Kit | . |   |   | . Setting up SAM RH71 Evaluation Kit . | Connect the J15 USB port on the board to the computer using a mini USB cable | Use jumper wire to Connect “Pin 16 of J24 header” to “Pin 17 of J24 header” . | FLEXCOM2_IO0 signal as MOSI signal and it is mapped to PA2 that is routed to “Pin 16 of J24 header” | FLEXCOM2_IO1 signal as MISO signal and it is mapped to PA6 that is routed to “Pin 17 of J24 header” | Connect debugger to the 20-pin JTAG header J33. | . | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/spi/async/spi_self_loopback_multi_client/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/driver/spi/async/spi_self_loopback_multi_client/readme.html#setting-up-the-hardware"
  },"23": {
    "doc": "SPI Driver asynchronous - Self loopback multi client",
    "title": "Running the Application",
    "content": ". | Build and program the application using its IDE | The LED is turned ON on Success | . Refer to the following table for LED name: . | Board | LED Name | . | SAM RH71 Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/spi/async/spi_self_loopback_multi_client/readme.html#running-the-application",
    "relUrl": "/apps/driver/spi/async/spi_self_loopback_multi_client/readme.html#running-the-application"
  },"24": {
    "doc": "SPI Driver asynchronous - Self loopback multi client",
    "title": "SPI Driver asynchronous - Self loopback multi client",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/spi/async/spi_self_loopback_multi_client/readme.html",
    "relUrl": "/apps/driver/spi/async/spi_self_loopback_multi_client/readme.html"
  },"25": {
    "doc": "SPI Driver synchronous - Self loopback multi client",
    "title": "SPI Driver synchronous - Self loopback multi client",
    "content": "This example demonstrates how to use the SPI driver in synchronous mode to achieve self-loop back between multiple clients in RTOS environment . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/spi/sync/spi_self_loopback_multi_client/readme.html#spi-driver-synchronous---self-loopback-multi-client",
    "relUrl": "/apps/driver/spi/sync/spi_self_loopback_multi_client/readme.html#spi-driver-synchronous---self-loopback-multi-client"
  },"26": {
    "doc": "SPI Driver synchronous - Self loopback multi client",
    "title": "Description",
    "content": ". | This example writes and reads back the same data (self loop back) for two different clients connected over the same SPI bus by using the multi client feature of a synchronous SPI driver . | The example also demonstrates how to setup two different client transfers at two different baud rates . | The example has three RTOS threads for the purpose: . | APP_CLIENT1_Tasks: . | This thread opens the SPI driver instance and performs a continuous loop back transfer | If the loop back is successful, the loop back is repeated every 100 ms | In case of an error, the thread closes the driver and suspends itself | . | APP_CLIENT2_Tasks: . | This thread opens the SPI driver instance and performs a continuous loop back transfer | If the loop back is successful, the loop back is repeated every 100 ms | In case of an error, the thread closes the driver and suspends itself | . | APP_MONITOR_Tasks: . | This thread checks the status of loop back done by the two client tasks and turns on the LED if the loop back transfer status reported by both the clients is successful | . | . | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/spi/sync/spi_self_loopback_multi_client/readme.html#description",
    "relUrl": "/apps/driver/spi/sync/spi_self_loopback_multi_client/readme.html#description"
  },"27": {
    "doc": "SPI Driver synchronous - Self loopback multi client",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/driver/spi/sync/spi_self_loopback_multi_client/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_rh71_ek_freertos.X | MPLABX project for SAM RH71 Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/spi/sync/spi_self_loopback_multi_client/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/driver/spi/sync/spi_self_loopback_multi_client/readme.html#downloading-and-building-the-application"
  },"28": {
    "doc": "SPI Driver synchronous - Self loopback multi client",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_rh71_ek_freertos.X | SAM RH71 Evaluation Kit | . |   |   | . Setting up SAM RH71 Evaluation Kit . | Connect the J15 USB port on the board to the computer using a mini USB cable | Use jumper wire to Connect “Pin 16 of J24 header” to “Pin 17 of J24 header” . | FLEXCOM2_IO0 signal as MOSI signal and it is mapped to PA2 that is routed to “Pin 16 of J24 header” | FLEXCOM2_IO1 signal as MISO signal and it is mapped to PA6 that is routed to “Pin 17 of J24 header” | Connect debugger to the 20-pin JTAG header J33. | . | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/spi/sync/spi_self_loopback_multi_client/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/driver/spi/sync/spi_self_loopback_multi_client/readme.html#setting-up-the-hardware"
  },"29": {
    "doc": "SPI Driver synchronous - Self loopback multi client",
    "title": "Running the Application",
    "content": ". | Build and program the application using its IDE | The LED is turned ON on Success | . Refer to the following table for LED name: . | Board | LED Name | . | SAM RH71 Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/spi/sync/spi_self_loopback_multi_client/readme.html#running-the-application",
    "relUrl": "/apps/driver/spi/sync/spi_self_loopback_multi_client/readme.html#running-the-application"
  },"30": {
    "doc": "SPI Driver synchronous - Self loopback multi client",
    "title": "SPI Driver synchronous - Self loopback multi client",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/spi/sync/spi_self_loopback_multi_client/readme.html",
    "relUrl": "/apps/driver/spi/sync/spi_self_loopback_multi_client/readme.html"
  },"31": {
    "doc": "USART driver asynchronous - UART echo",
    "title": "USART driver asynchronous - UART echo",
    "content": "This example echoes the received characters over the console using the USART driver in asynchronous mode. ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/usart/async/usart_echo/readme.html#usart-driver-asynchronous---uart-echo",
    "relUrl": "/apps/driver/usart/async/usart_echo/readme.html#usart-driver-asynchronous---uart-echo"
  },"32": {
    "doc": "USART driver asynchronous - UART echo",
    "title": "Description",
    "content": "This example uses the USART driver in asynchronous mode in Bare-Metal environment to communicate over the console. It receives and echo’s back the characters entered by the user. ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/usart/async/usart_echo/readme.html#description",
    "relUrl": "/apps/driver/usart/async/usart_echo/readme.html#description"
  },"33": {
    "doc": "USART driver asynchronous - UART echo",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/driver/usart/async/usart_echo/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_rh71_ek.X | MPLABX project for SAM RH71 Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/usart/async/usart_echo/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/driver/usart/async/usart_echo/readme.html#downloading-and-building-the-application"
  },"34": {
    "doc": "USART driver asynchronous - UART echo",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_rh71_ek.X | SAM RH71 Evaluation Kit | . |   |   | . Setting up SAM RH71 Evaluation Kit . | Connect the J15 USB port on the board to the computer using a mini USB cable | Connect debugger to the 20-pin JTAG header J33 | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/usart/async/usart_echo/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/driver/usart/async/usart_echo/readme.html#setting-up-the-hardware"
  },"35": {
    "doc": "USART driver asynchronous - UART echo",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application using its IDE | Type a character and observe the output on the console as shown below: . | LED toggles each time the character is echoed | . Refer to the following table for LED name: . | Board | LED Name | . | SAM RH71 Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/usart/async/usart_echo/readme.html#running-the-application",
    "relUrl": "/apps/driver/usart/async/usart_echo/readme.html#running-the-application"
  },"36": {
    "doc": "USART driver asynchronous - UART echo",
    "title": "USART driver asynchronous - UART echo",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/usart/async/usart_echo/readme.html",
    "relUrl": "/apps/driver/usart/async/usart_echo/readme.html"
  },"37": {
    "doc": "USART driver synchronous - UART echo",
    "title": "USART driver synchronous - UART echo",
    "content": "This example echoes the received characters over the console using the USART driver in synchronous mode. ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/usart/sync/usart_echo/readme.html#usart-driver-synchronous---uart-echo",
    "relUrl": "/apps/driver/usart/sync/usart_echo/readme.html#usart-driver-synchronous---uart-echo"
  },"38": {
    "doc": "USART driver synchronous - UART echo",
    "title": "Description",
    "content": "This example uses the USART driver in synchronous mode in RTOS environment to communicate over the console. It receives and echo’s back the characters entered by the user. ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/usart/sync/usart_echo/readme.html#description",
    "relUrl": "/apps/driver/usart/sync/usart_echo/readme.html#description"
  },"39": {
    "doc": "USART driver synchronous - UART echo",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/driver/usart/sync/usart_echo/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_rh71_ek_freertos.X | MPLABX project for SAM RH71 Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/usart/sync/usart_echo/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/driver/usart/sync/usart_echo/readme.html#downloading-and-building-the-application"
  },"40": {
    "doc": "USART driver synchronous - UART echo",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_rh71_ek_freertos.X | SAM RH71 Evaluation Kit | . |   |   | . Setting up SAM RH71 Evaluation Kit . | Connect the J15 USB port on the board to the computer using a mini USB cable | Connect debugger to the 20-pin JTAG header J33 | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/usart/sync/usart_echo/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/driver/usart/sync/usart_echo/readme.html#setting-up-the-hardware"
  },"41": {
    "doc": "USART driver synchronous - UART echo",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application using its IDE | Type a character and observe the output on the console as shown below: . | LED toggles each time the character is echoed | . Refer to the following table for LED name: . | Board | LED Name | . | SAM RH71 Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/usart/sync/usart_echo/readme.html#running-the-application",
    "relUrl": "/apps/driver/usart/sync/usart_echo/readme.html#running-the-application"
  },"42": {
    "doc": "USART driver synchronous - UART echo",
    "title": "USART driver synchronous - UART echo",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/usart/sync/usart_echo/readme.html",
    "relUrl": "/apps/driver/usart/sync/usart_echo/readme.html"
  },"43": {
    "doc": "FAT filesystem using NVM Media",
    "title": "FAT filesystem using NVM Media",
    "content": "This application shows an example of implementing a FAT disk in the device internal Flash memory. ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/fs/nvm_fat/readme.html#fat-filesystem-using-nvm-media",
    "relUrl": "/apps/fs/nvm_fat/readme.html#fat-filesystem-using-nvm-media"
  },"44": {
    "doc": "FAT filesystem using NVM Media",
    "title": "Description",
    "content": "File System Operations on NVM: . | Application places a FAT disk image consisting of a Master Boot Record (MBR) sector, Logical Boot Sector, File allocation Table, and Root Directory Area in the internal Flash memory (NVM) . | During execution, the application first opens an existing file named FILE.TXT and performs following file system related operations: . | SYS_FS_FileStat | SYS_FS_FileSize | SYS_FS_FileSeek | SYS_FS_FileEOF | . | It tries to read the file and checks if string “Data” is present. If present it continues to next step or it fails the application . | Finally, the string “Hello World” is written to this file. The string is then read and compared with the string that was written to the file. If the string compare is successful, An LED indication is provided | . File system layer uses: . | Memory driver to communicate with underlying NVM media | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/fs/nvm_fat/readme.html#description",
    "relUrl": "/apps/fs/nvm_fat/readme.html#description"
  },"45": {
    "doc": "FAT filesystem using NVM Media",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/fs/nvm_fat/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_rh71_ek.X | MPLABX project for SAM RH71 Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/fs/nvm_fat/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/fs/nvm_fat/readme.html#downloading-and-building-the-application"
  },"46": {
    "doc": "FAT filesystem using NVM Media",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_rh71_ek.X | SAM RH71 Evaluation Kit | . |   |   | . Setting up SAM RH71 Evaluation Kit . | Connect the J15 USB port on the board to the computer using a mini USB cable | Connect debugger to the 20-pin JTAG header J33 | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/fs/nvm_fat/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/fs/nvm_fat/readme.html#setting-up-the-hardware"
  },"47": {
    "doc": "FAT filesystem using NVM Media",
    "title": "Running the Application",
    "content": ". | Build and program the application using its IDE | Press Switch to start the file operations | The LED is turned ON when the File FILE.TXT has the app data “Hello World” written in it | . Refer to the following table for switch and LED name: . | Board | Switch name | LED Name | . | SAM RH71 Evaluation Kit | PB0 | LED1 | . |   |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/fs/nvm_fat/readme.html#running-the-application",
    "relUrl": "/apps/fs/nvm_fat/readme.html#running-the-application"
  },"48": {
    "doc": "FAT filesystem using NVM Media",
    "title": "FAT filesystem using NVM Media",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/fs/nvm_fat/readme.html",
    "relUrl": "/apps/fs/nvm_fat/readme.html"
  },"49": {
    "doc": "FAT filesystem using SDSPI Media",
    "title": "FAT filesystem using SDSPI Media",
    "content": "This application shows an example of using the MPLAB Harmony File System to access and modify the contents of a SD card using the SDSPI driver and the SPI PLIB . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/fs/sdspi_fat/readme.html#fat-filesystem-using-sdspi-media",
    "relUrl": "/apps/fs/sdspi_fat/readme.html#fat-filesystem-using-sdspi-media"
  },"50": {
    "doc": "FAT filesystem using SDSPI Media",
    "title": "Description",
    "content": "File System Operations on the SD Card: . | Application opens a file named FILE_TOO_LONG_NAME_EXAMPLE_123.JPG in the root directory of the SD card and reads its content into memory . | The image file could be any arbitrary JPEG (image) file chosen by the user and then renamed to FILE_TOO_LONG_NAME_EXAMPLE_123.JPG | . | Application creates directory named Dir1 in the root directory | Application creates a new file named FILE_TOO_LONG_NAME_EXAMPLE_123.JPG inside Dir1 | Application copies the content from step 1 into this newly created file | . The reason for choosing a JPEG file for test purposes is that the duplicate file, Dir1/FILE_TOO_LONG_NAME_EXAMPLE_123.JPG created by the demonstration could be easily verified for correctness.If the new file inside Dir1 opens for viewing on the computer and matches to original image, the test is deemed to have passed. Otherwise, if the file does not open (i.e., is corrupted), the test will be considered to have failed. Note: . Since the application creates a directory named Dir1, it is important that the a folder with the same name does not exist on the SD card. If a directory named Dir1 is already present on the SD card, the application will fail. File system layer uses: . | SDSPI Driver to communicate to SD Card over SPI interface. | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/fs/sdspi_fat/readme.html#description",
    "relUrl": "/apps/fs/sdspi_fat/readme.html#description"
  },"51": {
    "doc": "FAT filesystem using SDSPI Media",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/fs/sdspi_fat/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_rh71_ek.X | MPLABX project for SAM RH71 Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/fs/sdspi_fat/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/fs/sdspi_fat/readme.html#downloading-and-building-the-application"
  },"52": {
    "doc": "FAT filesystem using SDSPI Media",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_rh71_ek.X | SAM RH71 Evaluation Kit | . |   |   | . Setting up SAM RH71 Evaluation Kit . | To run the demo, the following additional hardware are required: . | One IO1 Xplained Pro Extension Kit | One micro-sd card | . | Connect IO1 Xplained Pro Extension Kit to the J24 connector | Insert the micro-SD Card in the micro-SD Card slot of the IO1 Xplained Pro Extension Kit | Connect the J15 USB port on the board to the computer using a mini USB cable | Connect debugger to the 20-pin JTAG header J33 | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/fs/sdspi_fat/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/fs/sdspi_fat/readme.html#setting-up-the-hardware"
  },"53": {
    "doc": "FAT filesystem using SDSPI Media",
    "title": "Running the Application",
    "content": ". | Build and program the application using its IDE | Press Switch to start the file operations | The LED is turned ON if there was no error during creating the directory and copying the file into it | . Refer to the following table for switch and LED name: . | Board | Switch name | LED Name | . | SAM RH71 Evaluation Kit | PB0 | LED0 | . |   |   |   | . | If LED is ON, Insert the SD Card on to your host PC | SD Card should have the file Dir1/FILE_TOO_LONG_NAME_EXAMPLE_123.JPG and should match the original image | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/fs/sdspi_fat/readme.html#running-the-application",
    "relUrl": "/apps/fs/sdspi_fat/readme.html#running-the-application"
  },"54": {
    "doc": "FAT filesystem using SDSPI Media",
    "title": "FAT filesystem using SDSPI Media",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/fs/sdspi_fat/readme.html",
    "relUrl": "/apps/fs/sdspi_fat/readme.html"
  },"55": {
    "doc": "FreeRTOS Task Notification",
    "title": "FreeRTOS Task Notification",
    "content": "This example application is to illustrate the FreeRTOS Task Notification feature which is used as a light weight binary semaphore. ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/rtos/freertos/task_notification_freertos/readme.html#freertos-task-notification",
    "relUrl": "/apps/rtos/freertos/task_notification_freertos/readme.html#freertos-task-notification"
  },"56": {
    "doc": "FreeRTOS Task Notification",
    "title": "Description",
    "content": ". | This demonstration creates two tasks that send notifications back and forth to each other. | Task2 blocks to wait for Task1 to notify and will be blocked for 500ms | Task1 sends a notification to Tasks2, bringing it out of the blocked state, toggles an LED | Task1 blocks to wait for Task2 to notify | Task2 sends notification to Task1, bringing it out of the blocked state | . | Above steps will be repeated. i.e. an LED toggles for every 500ms | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/rtos/freertos/task_notification_freertos/readme.html#description",
    "relUrl": "/apps/rtos/freertos/task_notification_freertos/readme.html#description"
  },"57": {
    "doc": "FreeRTOS Task Notification",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/rtos/freertos/task_notification_freertos/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_rh71_ek.X | MPLABX project for SAM RH71 Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/rtos/freertos/task_notification_freertos/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/rtos/freertos/task_notification_freertos/readme.html#downloading-and-building-the-application"
  },"58": {
    "doc": "FreeRTOS Task Notification",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_rh71_ek.X | SAM RH71 Evaluation Kit | . |   |   | . Setting up SAM RH71 Evaluation Kit . | Connect the J15 USB port on the board to the computer using a mini USB cable | Connect debugger to the 20-pin JTAG header J33 | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/rtos/freertos/task_notification_freertos/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/rtos/freertos/task_notification_freertos/readme.html#setting-up-the-hardware"
  },"59": {
    "doc": "FreeRTOS Task Notification",
    "title": "Running the Application",
    "content": ". | Build and program the application using its IDE | The LED toggles on success for every 500ms | . Refer to the following table for LED name: . | Board | LED Name | . | SAM RH71 Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/rtos/freertos/task_notification_freertos/readme.html#running-the-application",
    "relUrl": "/apps/rtos/freertos/task_notification_freertos/readme.html#running-the-application"
  },"60": {
    "doc": "FreeRTOS Task Notification",
    "title": "FreeRTOS Task Notification",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/rtos/freertos/task_notification_freertos/readme.html",
    "relUrl": "/apps/rtos/freertos/task_notification_freertos/readme.html"
  },"61": {
    "doc": "Time System Service multi-client",
    "title": "Time System Service multi-client",
    "content": "This example application demonstrates the multi-client system timer functionality . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/system/time/sys_time_multiclient/readme.html#time-system-service-multi-client",
    "relUrl": "/apps/system/time/sys_time_multiclient/readme.html#time-system-service-multi-client"
  },"62": {
    "doc": "Time System Service multi-client",
    "title": "Description",
    "content": ". | This application demonstrates timer functionality (with two clients to the Time System Service) by periodically printing a message on console every two seconds and blinking an LED every one second . | Delay, counter and single shot timer functionality is demonstrated on a switch press . | On a switch press, the application reads the current value of the 64 bit counter (say, count 1) | It then starts a delay of 500 milliseconds and waits for the delay to expire | Once the delay has expired, the application again reads the current value of the 64 bit counter (say, count 2) and calculates the difference between the two counter values . | The difference count indicates the time spent for the delay and is printed on the console as, “Delay time = x ms”, where x is the delay value and is equal to 500 milliseconds in the given example . | The application then starts a single shot timer of 100 milliseconds | When the single shot timer expires, a message is printed on the console that says “Single shot timer of 100 ms expired” | This message is printed only once on every switch press | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/system/time/sys_time_multiclient/readme.html#description",
    "relUrl": "/apps/system/time/sys_time_multiclient/readme.html#description"
  },"63": {
    "doc": "Time System Service multi-client",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/system/time/sys_time_multiclient/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_rh71_ek.X | MPLABX project for SAM RH71 Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/system/time/sys_time_multiclient/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/system/time/sys_time_multiclient/readme.html#downloading-and-building-the-application"
  },"64": {
    "doc": "Time System Service multi-client",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_rh71_ek.X | SAM RH71 Evaluation Kit | . |   |   | . Setting up SAM RH71 Evaluation Kit . | Connect the J15 USB port on the board to the computer using a mini USB cable | Connect debugger to the 20-pin JTAG header J33 | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/system/time/sys_time_multiclient/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/system/time/sys_time_multiclient/readme.html#setting-up-the-hardware"
  },"65": {
    "doc": "Time System Service multi-client",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application using its IDE | Observe the following message getting printed on the console every two seconds . | Press the switch and observe the following output on the terminal (highlighted in red box) . | “Delay time = 500 ms” indicates the amount of time spent during the delay | “Single shot timer of 100 ms expired” is printed only once on every switch press | . | LED indicates the periodic timer functionality . | LED is toggled periodically every one second | . | . Refer to the following table for switch and LED name: . | Board | Switch name | LED Name | . | SAM RH71 Evaluation Kit | PB0 | LED0 | . |   |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/system/time/sys_time_multiclient/readme.html#running-the-application",
    "relUrl": "/apps/system/time/sys_time_multiclient/readme.html#running-the-application"
  },"66": {
    "doc": "Time System Service multi-client",
    "title": "Time System Service multi-client",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/system/time/sys_time_multiclient/readme.html",
    "relUrl": "/apps/system/time/sys_time_multiclient/readme.html"
  },"67": {
    "doc": "I2C driver asynchronous - I2C EEPROM",
    "title": "I2C driver asynchronous - I2C EEPROM",
    "content": "This example application shows how to use the I2C driver in asynchronous mode to perform operations on the EEPROM. ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/i2c/async/i2c_eeprom/readme.html#i2c-driver-asynchronous---i2c-eeprom",
    "relUrl": "/apps/driver/i2c/async/i2c_eeprom/readme.html#i2c-driver-asynchronous---i2c-eeprom"
  },"68": {
    "doc": "I2C driver asynchronous - I2C EEPROM",
    "title": "Description",
    "content": "This example uses the I2C driver in asynchronous mode to communicate with the EEPROM to perform write and read operations in Bare-Metal environment. This application uses I2C driver to read and write data from an AT24CM02 EEPROM device. ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/i2c/async/i2c_eeprom/readme.html#description",
    "relUrl": "/apps/driver/i2c/async/i2c_eeprom/readme.html#description"
  },"69": {
    "doc": "I2C driver asynchronous - I2C EEPROM",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/driver/i2c/async/i2c_eeprom/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_rh71_ek.X | MPLABX project for SAM RH71 Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/i2c/async/i2c_eeprom/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/driver/i2c/async/i2c_eeprom/readme.html#downloading-and-building-the-application"
  },"70": {
    "doc": "I2C driver asynchronous - I2C EEPROM",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_rh71_ek.X | SAM RH71 Evaluation Kit | . |   |   | . Setting up SAM RH71 Evaluation Kit . | To run the demo, the following additional hardware are required: . | One EEPROM 3 Click board | One mikroBUS Xplained Pro boards | . | Connect mikroBUS Xplained Pro board to J24 header | Plug the EEPROM 3 click Board into the MikroBus socket of the mikroBUS Xplained Pro board | Connect the J15 USB port on the board to the computer using a mini USB cable | Connect debugger to the 20-pin JTAG header J33 | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/i2c/async/i2c_eeprom/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/driver/i2c/async/i2c_eeprom/readme.html#setting-up-the-hardware"
  },"71": {
    "doc": "I2C driver asynchronous - I2C EEPROM",
    "title": "Running the Application",
    "content": ". | Build and program the application using its IDE | LED indicates success or failure: . | The LED is turned ON when the value read from the EEPROM matched with the written value | . | . Refer to the following table for LED name: . | Board | LED Name | . | SAM RH71 Evaluation Kit | LED0 | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/i2c/async/i2c_eeprom/readme.html#running-the-application",
    "relUrl": "/apps/driver/i2c/async/i2c_eeprom/readme.html#running-the-application"
  },"72": {
    "doc": "I2C driver asynchronous - I2C EEPROM",
    "title": "I2C driver asynchronous - I2C EEPROM",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_rh71/apps/driver/i2c/async/i2c_eeprom/readme.html",
    "relUrl": "/apps/driver/i2c/async/i2c_eeprom/readme.html"
  },"73": {
    "doc": "Release notes",
    "title": "Microchip MPLAB® Harmony 3 Release Notes",
    "content": " ",
    "url": "http://localhost:4000/core_apps_sam_rh71/release_notes.html#microchip-mplab-harmony-3-release-notes",
    "relUrl": "/release_notes.html#microchip-mplab-harmony-3-release-notes"
  },"74": {
    "doc": "Release notes",
    "title": "Harmony 3 peripheral library application examples for SAM RH71 family  v3.4.0",
    "content": "Development kit and demo application support . Following table provides number of peripheral library examples available for different development kits. | Development Kits | MPLAB X applications | . | SAM RH71 Evaluation Kit | 10 | . | None | 2 | . New Features . | None | . Known Issues . | None | . Development Tools . | MPLAB® X IDE v6.05 | MPLAB® X IDE plug-ins: . | MPLAB® Code Configurator (MCC) v5.3.0 | . | MPLAB® XC32 C/C++ Compiler v4.21 | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/release_notes.html#harmony-3-peripheral-library-application-examples-for-sam-rh71-family--v340",
    "relUrl": "/release_notes.html#harmony-3-peripheral-library-application-examples-for-sam-rh71-family--v340"
  },"75": {
    "doc": "Release notes",
    "title": "Harmony 3 peripheral library application examples for SAM RH71 family  v3.3.0",
    "content": "Development kit and demo application support . Following table provides number of peripheral library examples available for different development kits. | Development Kits | MPLAB X applications | . | SAM RH71 Evaluation Kit | 10 | . New Features . | None | . Known Issues . | None | . Development Tools . | MPLAB® X IDE v6.00 | MPLAB® X IDE plug-ins: . | MPLAB® Code Configurator (MCC) v5.1.9 | . | MPLAB® XC32 C/C++ Compiler v4.10 | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/release_notes.html#harmony-3-peripheral-library-application-examples-for-sam-rh71-family--v330",
    "relUrl": "/release_notes.html#harmony-3-peripheral-library-application-examples-for-sam-rh71-family--v330"
  },"76": {
    "doc": "Release notes",
    "title": "Harmony 3 peripheral library application examples for SAM RH71 family  v3.2.0",
    "content": "Development kit and demo application support . Following table provides number of peripheral library examples available for different development kits. | Development Kits | MPLAB X applications | . | SAM RH71 Evaluation Kit | 10 | . New Features . | All applications are updated to work with both MHC and MCC tools | . Known Issues . | None | . Development Tools . | MPLAB® X IDE v5.50 | MPLAB® X IDE plug-ins: . | MPLAB® Harmony Configurator (MHC) v3.8.0 | . | MPLAB® XC32 C/C++ Compiler v3.01 | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/release_notes.html#harmony-3-peripheral-library-application-examples-for-sam-rh71-family--v320",
    "relUrl": "/release_notes.html#harmony-3-peripheral-library-application-examples-for-sam-rh71-family--v320"
  },"77": {
    "doc": "Release notes",
    "title": "Harmony 3 peripheral library application examples for SAM RH71 family  v3.1.0",
    "content": "Development kit and demo application support . Following table provides number of peripheral library examples available for different development kits. | Development Kits | MPLAB X applications | . | SAM RH71 Evaluation Kit | 10 | . New Features . | None | . Known Issues . | None | . Development Tools . | MPLAB® X IDE v5.45 | MPLAB® X IDE plug-ins: . | MPLAB® Harmony Configurator (MHC) v3.7.0 | . | MPLAB® XC32 C/C++ Compiler v2.50 | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/release_notes.html#harmony-3-peripheral-library-application-examples-for-sam-rh71-family--v310",
    "relUrl": "/release_notes.html#harmony-3-peripheral-library-application-examples-for-sam-rh71-family--v310"
  },"78": {
    "doc": "Release notes",
    "title": "Harmony 3 driver and system service application examples for SAM RH71 family  v3.0.1",
    "content": "New Features . | Added discover.microchip.com metadata | . Bug fixes . | Same as v3.0.0 | . Known Issues . | Same as v3.0.0 | . Development Tools . | Same as v3.0.0 | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/release_notes.html#harmony-3-driver-and-system-service-application-examples-for-sam-rh71-family--v301",
    "relUrl": "/release_notes.html#harmony-3-driver-and-system-service-application-examples-for-sam-rh71-family--v301"
  },"79": {
    "doc": "Release notes",
    "title": "Harmony 3 driver and system service application examples for SAM RH71 family  v3.0.0",
    "content": "Development kit and demo application support . Following table provides number of peripheral library examples available for different development kits. | Development Kits | MPLAB X applications | . | SAM RH71 Evaluation Kit | 10 | . New Features . New features added in this release are as follows: . | Applications migrated from csp repository to this new application repository for SAM RH71 development boards | . Known Issues . The current known issues are as follows: . | None | . Development Tools . | MPLAB® X IDE v5.40 | MPLAB® X IDE plug-ins: . | MPLAB® Harmony Configurator (MHC) v3.6.0 | . | MPLAB® XC32 C/C++ Compiler v2.41 | . ",
    "url": "http://localhost:4000/core_apps_sam_rh71/release_notes.html#harmony-3-driver-and-system-service-application-examples-for-sam-rh71-family--v300",
    "relUrl": "/release_notes.html#harmony-3-driver-and-system-service-application-examples-for-sam-rh71-family--v300"
  },"80": {
    "doc": "Release notes",
    "title": "Release notes",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_rh71/release_notes.html",
    "relUrl": "/release_notes.html"
  },"81": {
    "doc": "Harmony 3 driver and system service application examples for SAM RH71 family",
    "title": "Harmony 3 driver and system service application examples for SAM RH71 family",
    "content": "[![MCHP](https://www.microchip.com/ResourcePackages/Microchip/assets/dist/images/logo.png)](https://www.microchip.com) # Harmony 3 driver and system service application examples for SAM RH71 family MPLAB® Harmony 3 is an extension of the MPLAB® ecosystem for creating embedded firmware solutions for Microchip 32-bit SAM and PIC® microcontroller and microprocessor devices. Refer to the following links for more information. - [Microchip 32-bit MCUs](https://www.microchip.com/design-centers/32-bit) - [Microchip 32-bit MPUs](https://www.microchip.com/design-centers/32-bit-mpus) - [Microchip MPLAB X IDE](https://www.microchip.com/mplab/mplab-x-ide) - [Microchip MPLAB® Harmony](https://www.microchip.com/mplab/mplab-harmony) - [Microchip MPLAB® Harmony Pages](https://microchip-mplab-harmony.github.io/) This repository contains the MPLAB® Harmony 3 driver and system service application examples for SAM RH71 family - [Release Notes](/core_apps_sam_rh71/release_notes.html) - [MPLAB® Harmony License](/core_apps_sam_rh71/mplab_harmony_license.html) To clone or download these applications from Github, go to the [main page of this repository](https://github.com/Microchip-MPLAB-Harmony/core_apps_sam_rh71) and then click **Clone** button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these [instructions](https://github.com/Microchip-MPLAB-Harmony/contentmanager/wiki). ## Contents Summary | Folder | Description | --- | --- | apps | Contains driver and system service example applications | docs | Contains documentation in html format for offline viewing (to be used only after cloning this repository onto a local machine). Use [github pages](https://microchip-mplab-harmony.github.io/core_apps_sam_rh71/) of this repository for viewing it online. | ## Code Examples The following applications are provided to demonstrate the typical or interesting usage models of one or more peripheral libraries. | Name | Description | ---- | ----------- | [I2C driver asynchronous - I2C EEPROM](/core_apps_sam_rh71/apps/driver/i2c/async/i2c_eeprom/readme.html) | This example application shows how to use the I2C driver in asynchronous mode to perform operations on the EEPROM | [I2C driver synchronous - I2C EEPROM](/core_apps_sam_rh71/apps/driver/i2c/sync/i2c_eeprom/readme.html) | This example application shows how to use the I2C driver in synchronous mode to perform operations on the EEPROM | [Parallel PROM SST38 driver - SST38VF6401 memory Read Write](/core_apps_sam_rh71/apps/driver/parallel_prom/sst38_read_write/firmware/readme.html) | This example application shows how to use the Parallel PROM SST38 driver to perform read and write operations on a SST38VF6401 memory | [Parallel PROM SST39 driver - SST39VF040 memory Read Write](/core_apps_sam_rh71/apps/driver/parallel_prom/sst39_read_write/firmware/readme.html) | This example application shows how to use the Parallel PROM SST39 driver to perform read and write operations on a SST39VF040 memory | [SPI Driver asynchronous - Self loopback multi client](/core_apps_sam_rh71/apps/driver/spi/async/spi_self_loopback_multi_client/readme.html) | This example demonstrates how to use the SPI driver in asynchronous mode to achieve self-loop back between multiple clients | [SPI Driver synchronous - Self loopback multi client](/core_apps_sam_rh71/apps/driver/spi/sync/spi_self_loopback_multi_client/readme.html) | This example demonstrates how to use the SPI driver in synchronous mode to achieve self-loop back between multiple clients in RTOS environment | [USART driver asynchronous - UART echo](/core_apps_sam_rh71/apps/driver/usart/async/usart_echo/readme.html) | This example echoes the received characters over the console using the USART driver in asynchronous mode | [USART driver synchronous - UART echo](/core_apps_sam_rh71/apps/driver/usart/sync/usart_echo/readme.html) | This example echoes the received characters over the console using the USART driver in synchronous mode | [FAT filesystem using NVM Media](/core_apps_sam_rh71/apps/fs/nvm_fat/readme.html) | This application shows an example of implementing a FAT disk in the device internal Flash memory | [FAT filesystem using SDSPI Media](/core_apps_sam_rh71/apps/fs/sdspi_fat/readme.html) | This application shows an example of using the MPLAB Harmony File System to access and modify the contents of a SD card using the SDSPI driver and the SPI PLIB | [FreeRTOS Task Notification](/core_apps_sam_rh71/apps/rtos/freertos/task_notification_freertos/readme.html) | This example application is to illustrate the FreeRTOS Task Notification feature which is used as a light weight binary semaphore | [Time System Service multi-client](/core_apps_sam_rh71/apps/system/time/sys_time_multiclient/readme.html) | This example application demonstrates the multi-client system timer functionality | ____ [![License](https://img.shields.io/badge/license-Harmony%20license-orange.svg)](https://github.com/Microchip-MPLAB-Harmony/core_apps_sam_rh71/blob/master/mplab_harmony_license.md) [![Latest release](https://img.shields.io/github/release/Microchip-MPLAB-Harmony/core_apps_sam_rh71.svg)](https://github.com/Microchip-MPLAB-Harmony/core_apps_sam_rh71/releases/latest) [![Latest release date](https://img.shields.io/github/release-date/Microchip-MPLAB-Harmony/core_apps_sam_rh71.svg)](https://github.com/Microchip-MPLAB-Harmony/core_apps_sam_rh71/releases/latest) [![Commit activity](https://img.shields.io/github/commit-activity/y/Microchip-MPLAB-Harmony/core_apps_sam_rh71.svg)](https://github.com/Microchip-MPLAB-Harmony/core_apps_sam_rh71/graphs/commit-activity) [![Contributors](https://img.shields.io/github/contributors-anon/Microchip-MPLAB-Harmony/core_apps_sam_rh71.svg)]() ____ [![Follow us on Youtube](https://img.shields.io/badge/Youtube-Follow%20us%20on%20Youtube-red.svg)](https://www.youtube.com/user/MicrochipTechnology) [![Follow us on LinkedIn](https://img.shields.io/badge/LinkedIn-Follow%20us%20on%20LinkedIn-blue.svg)](https://www.linkedin.com/company/microchip-technology) [![Follow us on Facebook](https://img.shields.io/badge/Facebook-Follow%20us%20on%20Facebook-blue.svg)](https://www.facebook.com/microchiptechnology/) [![Follow us on Twitter](https://img.shields.io/twitter/follow/MicrochipTech.svg?style=social)](https://twitter.com/MicrochipTech) [![](https://img.shields.io/github/stars/Microchip-MPLAB-Harmony/core_apps_sam_rh71.svg?style=social)]() [![](https://img.shields.io/github/watchers/Microchip-MPLAB-Harmony/core_apps_sam_rh71.svg?style=social)]() ",
    "url": "http://localhost:4000/core_apps_sam_rh71/",
    "relUrl": "/"
  }
}
